<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net5.0;net5.0-windows10.0.19041;net6.0;net6.0-windows10.0.19041;net8.0;net8.0-windows10.0.19041;net9.0;net9.0-windows10.0.19041</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>

    <Nullable>enable</Nullable>
    <LangVersion>13.0</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="..\Common\PlugInEntryPoint.RxInfo.cs" Link="PlugInEntryPoint.RxInfo.cs" />
    <Compile Include="..\Common\PlugInEntryPoint.PlugInInfo.cs" Link="PlugInEntryPoint.PlugInInfo.cs" />
    <Compile Include="..\Common\PlugInEntryPoint.Net46Behaviour.cs" Link="PlugInEntryPoint.Net46Behaviour.cs" />
    <Compile Include="..\Common\PlugInEntryPoint.WindowsFormsAvailable.cs" Link="PlugInEntryPoint.WindowsFormsAvailable.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Reactive" Version="5.0.0" />
  </ItemGroup>

  <PropertyGroup>
    <!--
    By default, .NET assemblies from NuGet packages don't get copied to the build output of a library. (.NET Standard
    ones seems to, but not .NET Core or .NET 5+.) Typically that's fine, because the consuming application will see the
    transient dependency and copy the required assemblies to its output directory, but in the case of a plug-in, this
    project is effectively the final build. The host app isn't going to compile this project or attempt to load it
    as though it were a NuGet package.
    The docs for CopyLocalLockFileAssemblies indicate that enabling this setting is the right thing to do for plug-ins,
    because it enables the same 'this is the final build' behaviour that a normal consuming application would have.
    https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#copylocallockfileassemblies
    -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>


  <ItemGroup>
    <ProjectReference Include="..\PlugIn.Api\PlugIn.Api.csproj" />
  </ItemGroup>
</Project>
